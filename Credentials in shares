Description:

  - We often find credentials in network shares within scripts and configuration files (batch, cmd, PowerShell, conf, ini, and config). 

  - One admin user initially creates the shares with properly locked down access but ultimately opens it to everyone. Another admin of the 
    server could also be the culprit. Nonetheless, the share eventually becomes open to Everyone or Users, and recall that a server's Users group 
    contains Domain users as its member in Active Directory environments. Therefore every domain user will have at least read access (it is wrongly 
    assumed that adding 'Users' will give access to only those local to the server or Administrators).

  - Many admins test their scripts in a scripts folder in the C:\ drive; however, if the folder is shared (for example, with Users), then the data within 
    the scripts is also exposed on the network.

  - Another example is purposely creating an open share to move data to a server (for example, an application or some other files) and forgetting to close 
    it later.

  - Finally, in the case of hidden shares (folders whose name ends with a dollar sign $), there is a misconception that users cannot find the folder unless 
    they know where it exists

  - the misunderstanding comes from the fact that Explorer in Windows does not display files or folders whose name end with a $, however, any other tool will 
    show it.



Attack:

  - Identify which shares exist in a domain: Utilize PowerView's Invoke-ShareFinder
    Invoke-ShareFinder -domain eagle.local -ExcludeStandard -CheckShareAccess

  - SauronEye is a tool that exists that can parse a collection of files and pick up matching words

  - Utilize findstr (built in command): /m == Shows only filename or file that matches the term
  /i == ignored case in the search temr    /s == forces to search the current directory and all subdirectories.
    findstr /m /s /i "pass" *.bat
    findstr /m /s /i "pass" *.cmd
    findstr /m /s /i "pass" *.ini
    findstr /m /s /i "pass" *.config

    findstr /m /s /i "pw" *.bat

    findstr /m /s /i "eagle" *.ps1
    


Prevention:

  - Lock down every share in the domain so there are no loose permissions

  - Perform regular scans on AD environments to ID any new open shares or credentials exposed 


Detection:

  - Understanding users' behavior is the best detection technique for abusing discovered credentials in shares

  - Look for suspicious times of logins 

  - Alerts for Privileged Access Workstation should have alerts set for 4624/4625 (failed and successful logon) 
    and 4768 (kerberos TGT requested).

  - Another detection technique is discovering the one-to-many connections, for example, when Invoke-ShareFinder 
    scans every domain device to obtain a list of its network shares. It would be abnormal for 
    a workstation to connect to 100s or even 1000s of other devices simultaneously.


Honeypot:

  - semi-privileged username with a wrong password

  - An adversary can only discover this if the password was changed after the file's last modification containing 
    this exposed fake password

  - Below is a good setup for the account:
    
    A service account that was created 2+ years ago. The last password change should be at least one year ago.
    The last modification time of the file containing the fake password must be after the last password change of the account. Because it is a fake password, there is no risk of a threat agent compromising the account.
    The account is still active in the environment.
    The script containing the credentials should be realistic. (For example, if we choose an MSSQL service account, a connection string can expose the credentials.)

  - Monitor 4625, 4771, and 4776


















