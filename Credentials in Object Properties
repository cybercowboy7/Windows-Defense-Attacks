Description:

  - Objects in AD have a many different properties. A user object can contain properties
    that contain information such as:
      - Is the account active?
      - When does the account expire
      - When was the last password change
      - What is the name of the account
      - Office loaciton for the employee and phone number

  - It was common practice to add user's (or service account's) password in the Description
    or Info properties

  - Every Domain user can read most properties of an object (including Description and Info)


Attack:

  - PowerShell script that can query the entire domain by looking for specific search terms/strings
    in the Description or Info fields:

Function SearchUserClearTextInformation
{
    Param (
        [Parameter(Mandatory=$true)]
        [Array] $Terms,

        [Parameter(Mandatory=$false)]
        [String] $Domain
    )

    if ([string]::IsNullOrEmpty($Domain)) {
        $dc = (Get-ADDomain).RIDMaster
    } else {
        $dc = (Get-ADDomain $Domain).RIDMaster
    }

    $list = @()

    foreach ($t in $Terms)
    {
        $list += "(`$_.Description -like `"*$t*`")"
        $list += "(`$_.Info -like `"*$t*`")"
    }

    Get-ADUser -Filter * -Server $dc -Properties Enabled,Description,Info,PasswordNeverExpires,PasswordLastSet |
        Where { Invoke-Expression ($list -join ' -OR ') } | 
        Select SamAccountName,Enabled,Description,Info,PasswordNeverExpires,PasswordLastSet | 
        fl
}


  - Run the script to hunt for the string pass, to find the password in the Descrition property
    SearchUserClearTextInformation -Terms "pass"



Prevention:

  - Perform continuous assessments to detect the problem of storing credentials in properties of objects

  - Educate employees with high privileges to avoid storing credentials in properties of objects

  - Automate as much as possible of the user creation process to ensure that admins do not handle
    the accounts manually, reducing the risk of introducing hardcoded credentials in user objects.


Detection:

  - Baseline users' behavior 

  - Expect events with event ID 4624/4625 and 4768


Honeypot:

  - Store credentials in properties of objects:

    - The password/credential is configured in the Description field, as it's the easiest to pick up by any adversary

    - The provided password is fake/incorrect.

    - The account is enabled and has recent login attempts.

    - service accounts are more likely to have this exposed as administrators tend to create them manually. In contrast, 
      automated HR systems often make employee accounts (and the employees have likely changed the password already).

    - The account has the last password configured 2+ years ago (makes it more believable that the password will likely work).

  - Expect event ID's 4625, 4771, and 4776

















